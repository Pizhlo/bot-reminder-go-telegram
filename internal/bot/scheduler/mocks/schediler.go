// Code generated by MockGen. DO NOT EDIT.
// Source: ./scheduler.go

// Package mock_gocron is a generated GoMock package.
package mock_gocron

import (
	reflect "reflect"

	gocron "github.com/go-co-op/gocron/v2"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockscheduelrInterface is a mock of scheduelrInterface interface.
type MockscheduelrInterface struct {
	ctrl     *gomock.Controller
	recorder *MockscheduelrInterfaceMockRecorder
}

// MockscheduelrInterfaceMockRecorder is the mock recorder for MockscheduelrInterface.
type MockscheduelrInterfaceMockRecorder struct {
	mock *MockscheduelrInterface
}

// NewMockscheduelrInterface creates a new mock instance.
func NewMockscheduelrInterface(ctrl *gomock.Controller) *MockscheduelrInterface {
	mock := &MockscheduelrInterface{ctrl: ctrl}
	mock.recorder = &MockscheduelrInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockscheduelrInterface) EXPECT() *MockscheduelrInterfaceMockRecorder {
	return m.recorder
}

// Jobs mocks base method.
func (m *MockscheduelrInterface) Jobs() []gocron.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobs")
	ret0, _ := ret[0].([]gocron.Job)
	return ret0
}

// Jobs indicates an expected call of Jobs.
func (mr *MockscheduelrInterfaceMockRecorder) Jobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockscheduelrInterface)(nil).Jobs))
}

// NewJob mocks base method.
func (m *MockscheduelrInterface) NewJob(arg0 gocron.JobDefinition, arg1 gocron.Task, arg2 ...gocron.JobOption) (gocron.Job, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewJob", varargs...)
	ret0, _ := ret[0].(gocron.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewJob indicates an expected call of NewJob.
func (mr *MockscheduelrInterfaceMockRecorder) NewJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJob", reflect.TypeOf((*MockscheduelrInterface)(nil).NewJob), varargs...)
}

// RemoveByTags mocks base method.
func (m *MockscheduelrInterface) RemoveByTags(arg0 ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RemoveByTags", varargs...)
}

// RemoveByTags indicates an expected call of RemoveByTags.
func (mr *MockscheduelrInterfaceMockRecorder) RemoveByTags(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByTags", reflect.TypeOf((*MockscheduelrInterface)(nil).RemoveByTags), arg0...)
}

// RemoveJob mocks base method.
func (m *MockscheduelrInterface) RemoveJob(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveJob indicates an expected call of RemoveJob.
func (mr *MockscheduelrInterfaceMockRecorder) RemoveJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveJob", reflect.TypeOf((*MockscheduelrInterface)(nil).RemoveJob), arg0)
}

// Shutdown mocks base method.
func (m *MockscheduelrInterface) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockscheduelrInterfaceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockscheduelrInterface)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockscheduelrInterface) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockscheduelrInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockscheduelrInterface)(nil).Start))
}

// StopJobs mocks base method.
func (m *MockscheduelrInterface) StopJobs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopJobs")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopJobs indicates an expected call of StopJobs.
func (mr *MockscheduelrInterfaceMockRecorder) StopJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJobs", reflect.TypeOf((*MockscheduelrInterface)(nil).StopJobs))
}

// Update mocks base method.
func (m *MockscheduelrInterface) Update(arg0 uuid.UUID, arg1 gocron.JobDefinition, arg2 gocron.Task, arg3 ...gocron.JobOption) (gocron.Job, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(gocron.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockscheduelrInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockscheduelrInterface)(nil).Update), varargs...)
}
