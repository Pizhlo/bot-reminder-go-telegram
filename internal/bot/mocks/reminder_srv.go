// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Pizhlo/bot-reminder-go-telegram/internal/bot/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockreminderEditor is a mock of reminderEditor interface.
type MockreminderEditor struct {
	ctrl     *gomock.Controller
	recorder *MockreminderEditorMockRecorder
}

// MockreminderEditorMockRecorder is the mock recorder for MockreminderEditor.
type MockreminderEditorMockRecorder struct {
	mock *MockreminderEditor
}

// NewMockreminderEditor creates a new mock instance.
func NewMockreminderEditor(ctrl *gomock.Controller) *MockreminderEditor {
	mock := &MockreminderEditor{ctrl: ctrl}
	mock.recorder = &MockreminderEditorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreminderEditor) EXPECT() *MockreminderEditorMockRecorder {
	return m.recorder
}

// DeleteAllByUserID mocks base method.
func (m *MockreminderEditor) DeleteAllByUserID(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllByUserID indicates an expected call of DeleteAllByUserID.
func (mr *MockreminderEditorMockRecorder) DeleteAllByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllByUserID", reflect.TypeOf((*MockreminderEditor)(nil).DeleteAllByUserID), ctx, userID)
}

// DeleteJobAndReminder mocks base method.
func (m *MockreminderEditor) DeleteJobAndReminder(ctx context.Context, jobID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobAndReminder", ctx, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobAndReminder indicates an expected call of DeleteJobAndReminder.
func (mr *MockreminderEditorMockRecorder) DeleteJobAndReminder(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobAndReminder", reflect.TypeOf((*MockreminderEditor)(nil).DeleteJobAndReminder), ctx, jobID)
}

// DeleteMemory mocks base method.
func (m *MockreminderEditor) DeleteMemory(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemory", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemory indicates an expected call of DeleteMemory.
func (mr *MockreminderEditorMockRecorder) DeleteMemory(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemory", reflect.TypeOf((*MockreminderEditor)(nil).DeleteMemory), ctx, userID)
}

// DeleteReminderByID mocks base method.
func (m *MockreminderEditor) DeleteReminderByID(ctx context.Context, reminderID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReminderByID", ctx, reminderID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReminderByID indicates an expected call of DeleteReminderByID.
func (mr *MockreminderEditorMockRecorder) DeleteReminderByID(ctx, reminderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReminderByID", reflect.TypeOf((*MockreminderEditor)(nil).DeleteReminderByID), ctx, reminderID)
}

// GetAllByUserID mocks base method.
func (m *MockreminderEditor) GetAllByUserID(ctx context.Context, userID int64) ([]model.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockreminderEditorMockRecorder) GetAllByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockreminderEditor)(nil).GetAllByUserID), ctx, userID)
}

// GetAllJobs mocks base method.
func (m *MockreminderEditor) GetAllJobs(ctx context.Context, userID int64) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs", ctx, userID)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockreminderEditorMockRecorder) GetAllJobs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockreminderEditor)(nil).GetAllJobs), ctx, userID)
}

// GetByViewID mocks base method.
func (m *MockreminderEditor) GetByViewID(ctx context.Context, userID int64, viewID int) (*model.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByViewID", ctx, userID, viewID)
	ret0, _ := ret[0].(*model.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByViewID indicates an expected call of GetByViewID.
func (mr *MockreminderEditorMockRecorder) GetByViewID(ctx, userID, viewID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByViewID", reflect.TypeOf((*MockreminderEditor)(nil).GetByViewID), ctx, userID, viewID)
}

// GetJobID mocks base method.
func (m *MockreminderEditor) GetJobID(ctx context.Context, reminderID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobID", ctx, reminderID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobID indicates an expected call of GetJobID.
func (mr *MockreminderEditorMockRecorder) GetJobID(ctx, reminderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobID", reflect.TypeOf((*MockreminderEditor)(nil).GetJobID), ctx, reminderID)
}

// GetMemory mocks base method.
func (m *MockreminderEditor) GetMemory(ctx context.Context) ([]model.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemory", ctx)
	ret0, _ := ret[0].([]model.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemory indicates an expected call of GetMemory.
func (mr *MockreminderEditorMockRecorder) GetMemory(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemory", reflect.TypeOf((*MockreminderEditor)(nil).GetMemory), ctx)
}

// GetReminderID mocks base method.
func (m *MockreminderEditor) GetReminderID(ctx context.Context, userID int64, viewID int) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReminderID", ctx, userID, viewID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReminderID indicates an expected call of GetReminderID.
func (mr *MockreminderEditorMockRecorder) GetReminderID(ctx, userID, viewID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReminderID", reflect.TypeOf((*MockreminderEditor)(nil).GetReminderID), ctx, userID, viewID)
}

// Save mocks base method.
func (m *MockreminderEditor) Save(ctx context.Context, reminder *model.Reminder) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, reminder)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockreminderEditorMockRecorder) Save(ctx, reminder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockreminderEditor)(nil).Save), ctx, reminder)
}

// SaveJob mocks base method.
func (m *MockreminderEditor) SaveJob(ctx context.Context, reminderID, jobID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveJob", ctx, reminderID, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveJob indicates an expected call of SaveJob.
func (mr *MockreminderEditorMockRecorder) SaveJob(ctx, reminderID, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveJob", reflect.TypeOf((*MockreminderEditor)(nil).SaveJob), ctx, reminderID, jobID)
}

// SaveMemory mocks base method.
func (m *MockreminderEditor) SaveMemory(ctx context.Context, reminder *model.Reminder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMemory", ctx, reminder)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMemory indicates an expected call of SaveMemory.
func (mr *MockreminderEditorMockRecorder) SaveMemory(ctx, reminder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMemory", reflect.TypeOf((*MockreminderEditor)(nil).SaveMemory), ctx, reminder)
}
